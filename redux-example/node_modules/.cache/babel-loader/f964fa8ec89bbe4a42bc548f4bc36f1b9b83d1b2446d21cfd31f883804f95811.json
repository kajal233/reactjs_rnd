{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// const counterReducer=(state=initialState,action)=>\n// {\n//     if (action.type==='increment') {\n//       return{\n//         counter:state.counter + 1,\n//         showCounter:state.showCounter\n//       };\n//     }\n//     if (action.type==='increase') {\n//         return{\n//           counter:state.counter + action.amount,\n//           showCounter:state.showCounter\n//         };\n//       }\n//     if (action.type==='decrement') {\n//         return{\n//           counter:state.counter - 1,\n//           showCounter:state.showCounter\n//         };\n//       }\n//       if (action.type==='toggle') {\n//         return{\n//           showCounter: !state.showCounter,\n//           counter: state.counter\n//         };\n//       }\n//       return state;\n// };\n\nconst initialAuthState = {\n  isAuthenticated: false\n};\ncreateSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","login","logout","store","reducer","counterActions","actions"],"sources":["D:/MyProjects/ReactjsRND/redux-example/src/store/index.js"],"sourcesContent":["import {createSlice,configureStore} from '@reduxjs/toolkit';\r\nconst initialState={counter:0,showCounter:true};\r\n\r\nconst counterSlice=createSlice({\r\n    name:'counter',\r\n    initialState,\r\n    reducers:{\r\n        increment(state){\r\n            state.counter++;\r\n        },\r\n        decrement(state){\r\n            state.counter--;\r\n        },\r\n        increase(state,action){\r\n            state.counter=state.counter + action.payload;\r\n        },\r\n        toggleCounter(state){\r\n            state.showCounter=!state.showCounter;\r\n        }\r\n\r\n    }\r\n});\r\n\r\n// const counterReducer=(state=initialState,action)=>\r\n// {\r\n//     if (action.type==='increment') {\r\n//       return{\r\n//         counter:state.counter + 1,\r\n//         showCounter:state.showCounter\r\n//       };\r\n//     }\r\n//     if (action.type==='increase') {\r\n//         return{\r\n//           counter:state.counter + action.amount,\r\n//           showCounter:state.showCounter\r\n//         };\r\n//       }\r\n//     if (action.type==='decrement') {\r\n//         return{\r\n//           counter:state.counter - 1,\r\n//           showCounter:state.showCounter\r\n//         };\r\n//       }\r\n//       if (action.type==='toggle') {\r\n//         return{\r\n//           showCounter: !state.showCounter,\r\n//           counter: state.counter\r\n//         };\r\n//       }\r\n//       return state;\r\n// };\r\n\r\nconst initialAuthState={\r\n    isAuthenticated:false\r\n};\r\ncreateSlice({\r\n    name:'authentication',\r\n    initialState:initialAuthState,\r\n    reducers:{\r\n        login(state){\r\n            state.isAuthenticated=true;\r\n        },\r\n        logout(state){\r\n            state.isAuthenticated=false;\r\n        }\r\n    }\r\n})\r\n\r\nconst store=configureStore({\r\n    reducer:counterSlice.reducer\r\n});\r\nexport const counterActions=counterSlice.actions;\r\nexport default store;"],"mappings":"AAAA,SAAQA,WAAW,EAACC,cAAc,QAAO,kBAAkB;AAC3D,MAAMC,YAAY,GAAC;EAACC,OAAO,EAAC,CAAC;EAACC,WAAW,EAAC;AAAI,CAAC;AAE/C,MAAMC,YAAY,GAACL,WAAW,CAAC;EAC3BM,IAAI,EAAC,SAAS;EACdJ,YAAY;EACZK,QAAQ,EAAC;IACLC,SAASA,CAACC,KAAK,EAAC;MACZA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAC;MACZA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAACG,MAAM,EAAC;MAClBH,KAAK,CAACN,OAAO,GAACM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAC;MAChBA,KAAK,CAACL,WAAW,GAAC,CAACK,KAAK,CAACL,WAAW;IACxC;EAEJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMW,gBAAgB,GAAC;EACnBC,eAAe,EAAC;AACpB,CAAC;AACDhB,WAAW,CAAC;EACRM,IAAI,EAAC,gBAAgB;EACrBJ,YAAY,EAACa,gBAAgB;EAC7BR,QAAQ,EAAC;IACLU,KAAKA,CAACR,KAAK,EAAC;MACRA,KAAK,CAACO,eAAe,GAAC,IAAI;IAC9B,CAAC;IACDE,MAAMA,CAACT,KAAK,EAAC;MACTA,KAAK,CAACO,eAAe,GAAC,KAAK;IAC/B;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMG,KAAK,GAAClB,cAAc,CAAC;EACvBmB,OAAO,EAACf,YAAY,CAACe;AACzB,CAAC,CAAC;AACF,OAAO,MAAMC,cAAc,GAAChB,YAAY,CAACiB,OAAO;AAChD,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}